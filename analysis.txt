1) collecting assets to check
    - [X] use state db to check position in feedproxy
    - [X] read feedproxy and capture events
    - [X] only capture events that are applicable to the correct assettypes (use base64 encoded short_uri)
    - [X] only capture events that have a context-id
2) check the context-id
    - [X] use /eventcontexts/{uuid} to get the description
    - [X] use the description to search in the DAVIE API using field "vrijeZoekterm"
    - [X] filter using "aanleveringnummer" and "dossierNummer" ("VWT-CEW-2020-009-5", ...)
    - [X] save the delivery uuid
    - [X] save the delivery with the modified assets and their updated timestamps
    - [ ] poll often to check for status 'Goedgekeurd'
    - [ ] mark delivery as final if there are no updates for 5 minutes
    - [ ] make reports for all deliveries that are final and that have no updates
    - [ ] only add assets to non-final deliveries. If they are final, remove all asset data first
3) use validated delivery
    - [ ] clear all asset data from state db that is related to the delivery
    - [ ] find all assets that were changed in that delivery (wait for EM-3200 or using emson endpoint)
    - [ ] filter for isActief = true
    - [X] collect all related asset information using the asset info collector algorithm (starting from a LED toestel)
    - [/] generate a report to update legacy data (1 record per legacy asset) with
      - [X] relations
      - [/] attributes
        - [X] most attributes
        - [ ] contractnummer_levering_LED (via aanleveringsbestek)
        - [ ] calculating the difference between existing legacy and otl
      - [ ] kenmerken
        - [ ] bestekkoppeling
        - [ ] schadebeheerder
        - [ ] VTC instructie
        - [ ] toezichter / toezichtgroep
      - [X] geometry
      - [X] names
      - [ ] (N/A in first implementation) creation of new assets
    - [ ] save the report in the state db
    - [ ] at regular intervals, recollect the asset information by clearing the asset data
4) update legacy data
    - [ ] find reports in state db that have sufficient information to use for updates
    - [ ] update legacy data using the state report until everything is marked as done
    - [ ] update the status of the aanlevering in state db to 'verwerkt'

 X) Extra
    - [ ] regex check on armatuur controller
    - [ ] more than 1 controller / toestel found with traverse_graph is captured as an extra error

refactor to allow for multiple leds on one drager